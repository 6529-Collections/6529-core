name: Build MacOS

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      version:
        required: true
        type: string
      should_run:
        required: true
        type: boolean

jobs:
  build-mac:
    name: ${{ inputs.should_run && 'Build & Sign' || 'Skipped' }}
    runs-on: macos-latest

    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    steps:
      - name: Check if should run
        if: ${{ !inputs.should_run }}
        run: echo "Skipping because should_run=false"

      - name: Decode signing certificate
        if: ${{ inputs.should_run }}
        run: |
          mkdir -p certs
          echo "${{ secrets.CERTIFICATE_P12 }}" | base64 --decode > certs/signing_certificate.p12

      - name: Import signing certificate
        if: ${{ inputs.should_run }}
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certs/signing_certificate.p12 -k build.keychain -P ${{ secrets.CERT_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: List code signing identities
        if: ${{ inputs.should_run }}
        run: security find-identity -v -p codesigning

      - name: Check out
        if: ${{ inputs.should_run }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
          lfs: true

      - name: Get version from package.json
        if: ${{ inputs.should_run }}
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Verify input version matches package.json version
        if: ${{ inputs.should_run }}
        run: |
          echo "Input version: ${{ inputs.version }}"
          echo "Package.json version: ${{ steps.get_version.outputs.version }}"
          if [ "${{ inputs.version }}" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "❌ Version mismatch!"
            exit 1
          fi

      - name: Set up Node
        if: ${{ inputs.should_run }}
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        if: ${{ inputs.should_run }}
        run: npm ci

      - name: Configure AWS Credentials
        if: ${{ inputs.should_run }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Inject secrets into .env file
        if: ${{ inputs.should_run }}
        run: |
          echo "APPLE_ID=$APPLE_ID" >> .env
          echo "APPLE_ID_PASSWORD=$APPLE_ID_PASSWORD" >> .env
          echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> .env

      - name: Build for MacOS (Staging)
        if: ${{ inputs.should_run && inputs.env == 'Staging' }}
        run: |
          echo "Building for Staging..."
          DEBUG=electron-builder npm run dist-mac-staging

      - name: Build for MacOS (Production - arm64)
        if: ${{ inputs.should_run && inputs.env == 'Production' }}
        run: |
          echo "Building Production arm64..."
          DEBUG=electron-builder npm run dist-mac-production-arm64

      - name: Build for MacOS (Production - x64)
        if: ${{ inputs.should_run && inputs.env == 'Production' }}
        run: |
          echo "Building Production x64..."
          DEBUG=electron-builder npm run dist-mac-production-x64
