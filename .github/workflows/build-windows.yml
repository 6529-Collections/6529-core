name: Build Windows

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      version:
        required: true
        type: string
      should_run:
        required: true
        type: boolean

jobs:
  build-windows:
    name: ${{ inputs.should_run && 'Build' || 'Skipped' }}
    runs-on: macos-latest

    steps:
      - name: Check if should run
        if: ${{ !inputs.should_run }}
        run: echo "Skipping because should_run=false"

      - name: Check out
        if: ${{ inputs.should_run }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
          lfs: true

      - name: Get version from package.json
        if: ${{ inputs.should_run }}
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Verify input version matches package.json version
        if: ${{ inputs.should_run }}
        run: |
          echo "Input version: ${{ inputs.version }}"
          echo "Package.json version: ${{ steps.get_version.outputs.version }}"
          if [ "${{ inputs.version }}" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "❌ Version mismatch!"
            exit 1
          fi

      - name: Set up Node
        if: ${{ inputs.should_run }}
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Python 3.11 with distutils
        if: ${{ inputs.should_run }}
        run: |
          brew install python@3.11
          echo "PATH=/opt/homebrew/opt/python@3.11/bin:$PATH" >> $GITHUB_ENV

      - name: Set Python 3.11 as default
        if: ${{ inputs.should_run }}
        run: echo "PYTHON=/opt/homebrew/opt/python@3.11/bin/python3.11" >> $GITHUB_ENV

      - name: Install dependencies
        if: ${{ inputs.should_run }}
        run: npm ci

      - name: Configure AWS Credentials
        if: ${{ inputs.should_run }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build for Windows
        if: ${{ inputs.should_run }}
        run: |
          if [ "${{ inputs.env }}" = "Staging" ]; then
            npm run dist-win-staging-upload
          else
            npm run dist-win-production-upload
          fi

  sign-windows:
    name: ${{ inputs.should_run && 'Sign' || 'Skipped' }}
    runs-on: windows-latest
    needs: build-windows

    env:
      AZURE_KEY_VAULT_URL: ${{ secrets.AZURE_KEY_VAULT_URL }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      CERT_NAME: ${{ secrets.CERT_NAME }}

    steps:
      - name: Check if should run
        if: ${{ !inputs.should_run }}
        run: echo "Skipping because should_run=false"

      - name: Check out
        if: ${{ inputs.should_run }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Node
        if: ${{ inputs.should_run }}
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install signing dependencies
        if: ${{ inputs.should_run }}
        working-directory: ./sign-win
        run: npm ci

      - name: Install AzureSignTool
        if: ${{ inputs.should_run }}
        run: dotnet tool install --global AzureSignTool

      - name: Add dotnet tools to PATH
        if: ${{ inputs.should_run }}
        run: echo "$env:USERPROFILE\\.dotnet\\tools" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
        shell: pwsh

      - name: Configure AWS Credentials
        if: ${{ inputs.should_run }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sign executables & upload to S3
        if: ${{ inputs.should_run }}
        working-directory: ./sign-win
        shell: pwsh
        run: |
          if ("${{ inputs.env }}" -eq "Staging") {
            npm run sign-publish-staging-win
          } else {
            npm run sign-publish-production-win
          }
